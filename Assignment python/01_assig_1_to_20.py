# -*- coding: utf-8 -*-
"""questions 1 to 20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y_qhprTF7ccRQxd6wK2QeklIM00mDOFU

1) What are the types of Applications?
Python is a versatile language used for various types of applications and they are:

1. web application
2. Gaming application
3. Desktop application
4. Data Science and Analytics applications
5. Machine Learning and AI application
6. Cyber Security
7. Networking Applications
8. Blockchain Applications
9. Automation & Scripting applications

2) What is programing?

Programming is the process of giving instructions to a computer to perform specific tasks. Since learning Python for data analytics, programming will help analyze and visualize data efficiently.

3) What is Python?

Python is a high-level, interpreted, and general-purpose programming language known for its simplicity and readability. It is widely used in various fields like web development, data science, automation, AI, and more.
"""

#4)Write a Python program to check if a number is positive, negative or zero.

num = int(input("Enter any Number : "))

if num > 0 :
    print("Positive")
elif num == 0 :
  print("Zero")
else :
   print("Negative")

#5) Write a Python program to get the Factorial number of given numbers.

def factorial(n):
    if n < 0:
        return "Factorial is not defined for negative numbers."
    elif n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result

# Input from the user
try:
    number = int(input("Enter a non-negative integer: "))
    result = factorial(number)
    print(f"The factorial of {number} is {result}.")
except ValueError:
    print("Please enter a valid non-negative integer.")

#6) Write a Python program to get the Fibonacci series of given range

def fibonacci_series(n):
    fib_series = []
    a, b = 0, 1
    while a <= n:
        fib_series.append(a)
        a, b = b, a + b
    return fib_series


# Input from the user
try:
    number = int(input("Enter a positive integer to define the range: "))
    if number < 0:
        print("Please enter a integer.")
    else:
        result = fibonacci_series(number)
        print(f"The Fibonacci series up to {number} is: {result}")
except ValueError:
    print("Please enter a valid integer.")

"""7) How memory is managed in Python?

Python uses automatic memory management to allocate and free memory efficiently. It uses a combination of techniques like reference counting, garbage collection, and memory pools to handle memory.

8) What is the purpose continuing statement in python?

The continue statement is used inside loops (for, while) to skip the current iteration and move to the next one without exiting the loop. It helps skip specific iterations based on conditions. It is useful when certain values need to be ignored in a loop.
"""

#9) Write python program that swap two number with temp variable and without temp variable.
# with temp variable

a = int(input("Enter First number : "))
b = int(input("Enter Second number : "))

print("Before SWapping:","a=",a,"b=",b)
temp = a
a = b
b = temp

print("After Swapping:","a=",a,"b=",b)

#without temp variable

a = int(input("Enter First number : "))
b = int(input("Enter Second number : "))

a,b = b,a

print("After Swapping:")
print("a=",a)
print("b=",b)

# 10)Write a Python program to find whether a given number is even or odd, print out an appropriate message to the user.

num = int(input("Enter any Number:"))

if num % 2 == 0 :
    print("The number is Even")
else :
    print("The number is Odd")

#11)Write a Python program to test whether a passed letter is a vowel or not.

letter = input("Enter any letter:")

vowels = {'a','e','i','o','u'}

if letter in vowels :
    print(f"The {letter} is a vowel")
else :
  print(f"The {letter} is not vowel")

#12)Write a Python program to sum of three given integers. However, if two values are equal sum will be zero.

def sum_of_integers (a,b,c):
    if a == b or b == c or a == c:
        return 0
    else:
        return a + b + c

# Example usage
num1 = int(input("Enter the first integer: "))
num2 = int(input("Enter the second integer: "))
num3 = int(input("Enter the third integer: "))

result = sum_of_integers(num1, num2, num3)
print("The result is:", result)

#13)Write a Python program that will return true if the two given
#integer values are equal or their sum or difference is 5.

def test_value(x, y):
    if x == y or abs(x - y) == 5 or (x + y) == 5:
        return True
    else:
        return False
# Example usage
num1 = int(input("Enter the first integer: "))
num2 = int(input("Enter the second integer: "))

result = test_value(num1, num2)
print("The result is:", result)

#14) Write a python program to sum of the first n positive integers.

def sum_of_integers(n):

    return n * (n + 1) // 2

n = int(input("Enter a positive integer: "))

if n > 0:
    result = sum_of_integers(n)
    print(f"The sum of the first {n} positive integers is {result}.")
else:
    print("Please enter a positive integer.")

#15) Write a Python program to calculate the length of a string.

def string_length(s):
    return len(s)

user_string = input("Enter a string: ")

length = string_length(user_string)
print(f"The length of the string is {length}.")

#16) Write a Python program to count the number of characters(character frequency) in a string

def count_characters(s):
    # Create a dictionary to store character frequencies
    frequency = {}

    # Iterate over each character in the string
    for char in s:
        if char in frequency:
            frequency[char] += 1
        else:
            frequency[char] = 1

    return frequency

# Get user input
user_string = input("Enter a string: ")

# Calculate character frequencies
char_count = count_characters(user_string)

# Display the character frequencies
print("Character frequencies:")
for char, count in char_count.items():
    print(f"'{char}': {count}")

"""#17) What are negative indexes and why are they used?

In Python, negative indexes provide a way to access elements from the end of a sequence, such as a list, tuple, or string, rather than from the beginning. They offer a convenient way to refer to elements relative to the end of the sequence without needing to calculate the length.

How Negative Indexes Work:
-1 refers to the last element of the sequence.
-2 refers to the second-to-last element.
And so on.

Why Negative Indexes Are Used:
Convenience: They simplify accessing elements from the end of a sequence without needing to compute the length of the sequence.
Readability: They make code more readable by clearly indicating that you are accessing elements relative to the end of the sequence.
Flexibility: They are useful when dealing with sequences of unknown or variable lengths, allowing you to easily access the last few elements without recalculating their positions.
Negative indexing is particularly useful in scenarios where you need to access the last few elements of a sequence or when working with sequences where the length can vary.

"""

my_list = [10, 20, 30, 40, 50]
print(my_list[-1])
print(my_list[-2])


my_str= "Rensi Hirpara"
print(my_str[-1])
print(my_str[-2])

#18) Write a Python program to count occurrences of a substring in a string.

def count_occurrences(string, substring):
    count = 0
    start = 0

    while True:
        start = string.find(substring, start)
        if start == -1:
            break
        count += 1
        start += len(substring)

    return count

# Example usage:
string = "This is a test string. Testing the function to count test occurrences."
substring = "test"
print(f"The substring '{substring}' occurs {count_occurrences(string, substring)} times.")

